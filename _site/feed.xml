<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-04-01T09:52:23+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">The DarkForge Labs Blog</title><subtitle>Welcome to the DarkForge Labs blog! We explore topics that  intrigue us, from security research to upcoming events.  Enjoy your stay! – The DarkForge Labs Team</subtitle><entry><title type="html">A Case for Authentication at the Edge</title><link href="http://localhost:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge.html" rel="alternate" type="text/html" title="A Case for Authentication at the Edge" /><published>2025-04-01T09:00:00+02:00</published><updated>2025-04-01T09:00:00+02:00</updated><id>http://localhost:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge</id><content type="html" xml:base="http://localhost:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge.html"><![CDATA[<h1 id="authentication-at-the-edge">Authentication at the Edge</h1>

<p>When <a href="https://zhero-web-sec.github.io/research-and-things/nextjs-and-the-corrupt-middleware">CVE-2025-29927</a> dropped, it lit up the infosec world. An authentication bypass in Next.js middleware raised urgent questions not just about the vulnerability itself but about architectural choices.</p>

<p><em>Should we be enforcing authentication in the middleware?</em></p>

<p>It’s a question that’s polarized developers and security engineers alike. <a href="https://x.com/moopinger/status/1906281539815579790">Our own X poll came back split almost exactly down the middle.</a></p>

<p>But after digging into the excellent write-ups from <a href="https://www.neoxs.me/blog/critical-nextjs-middleware-vulnerability-cve-2025-29927-authentication-bypass">neox</a>, <a href="https://slcyber.io/assetnote-security-research-center/doing-the-due-diligence-analysing-the-next-js-middleware-bypass-cve-2025-29927">Assetnote</a>, <a href="https://jfrog.com/blog/cve-2025-29927-next-js-authorization-bypass/">JFrog</a>, and <a href="https://www.rapid7.com/blog/post/2025/03/25/etr-notable-vulnerabilities-in-next-js-cve-2025-29927/">Rapid7</a> — we realized something:</p>

<p>We’ve been asking the wrong question.</p>

<h2 id="the-real-question-should-all-your-authentication-run-in-nextjs-middleware">The Real Question: Should <em>All</em> Your Authentication Run in <em>Next.js</em> Middleware?</h2>

<p>That’s the actual crux. And the answer is a resounding <span class="underline">no</span>.</p>

<p>Middleware in Next.js, especially in the App Router, runs in an <strong>edge runtime</strong>. That means it operates in a different environment than your backend or API routes. It’s fast, global, and lightweight. But it also has real limitations:</p>

<ul>
  <li><a href="https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes">The edge runtime runs on a separate more limited Node runtime</a></li>
  <li><a href="https://clerk.com/blog/what-is-middleware-in-nextjs">Limited access to full request bodies</a></li>
</ul>

<p>Compare this to <code class="language-plaintext highlighter-rouge">Express.js</code> middleware, which runs in a Node.js server with full control over the request lifecycle. Same word <em>middleware</em> but completely different realities.</p>

<p>That distinction matters. Because when you put critical auth logic in Next.js edge middleware, you’re betting your security on a layer that wasn’t built for that burden.</p>

<p>Even <strong>Vercel</strong> says as much in their <a href="https://vercel.com/blog/postmortem-on-next-js-middleware-bypass">postmortem</a>:</p>

<blockquote>
  <p>“We do not recommend Middleware to be the sole method of protecting routes in your application”</p>
</blockquote>

<h2 id="so-what-is-edge-based-middleware-good-for">So What Is Edge Based Middleware Good For?</h2>

<p>Used correctly, Next.js middleware can still be a powerful tool — especially for <strong>coarse-grained access control</strong>. Think of it like the lobby guard, not the vault door.</p>

<ul>
  <li><strong>Use it to block unauthenticated users</strong> from public routes</li>
  <li><strong>Redirect users to login</strong> if they’re missing a session</li>
  <li><strong>Apply basic tenant-aware routing</strong></li>
</ul>

<p>But the real enforcement should happen deeper:</p>

<ul>
  <li><strong>Don’t check roles or permissions here</strong></li>
  <li><strong>Don’t make critical auth decisions</strong> based only on this layer</li>
</ul>

<p>Instead, <strong>put your fine-grained logic</strong> on the server side — RBAC, ABAC, tenant isolation — <strong>inside your API routes or backend logic</strong>.</p>

<h2 id="lessons-from-cve-2025-29927">Lessons from CVE-2025-29927</h2>

<p>The flaw that triggered this debate didn’t involve tricky encoding or exotic Unicode behavior to bypass route matches. It was much simpler: by crafting a request with a specific HTTP header (<code class="language-plaintext highlighter-rouge">x-middleware-subrequest</code>), attackers could trick the server into skipping middleware entirely — and bypass authentication logic that only lived there.</p>

<p>It’s a classic case of trusting the wrong layer.</p>

<blockquote>
  <p><strong>If one bypass breaks your security, you didn’t have security. You had hope.</strong></p>
</blockquote>

<p>Here’s how to build for reality:</p>

<ul>
  <li><strong>Defend in depth</strong> — don’t make any single layer your only layer.</li>
  <li><strong>Authorize where it counts</strong> — at the point of data access, in your APIs.</li>
</ul>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>CVE-2025-29927 isn’t the first middleware bypass — and it likely won’t be the last. That doesn’t mean middleware auth in Next.js is useless. Far from it.</p>

<p>Edge-based middleware is still a great place for coarse-grained controls. It can improve UX. It can help performance. It can offload basic gating logic.</p>

<p>But <span class="underline">it can’t be your only line of defense.</span></p>

<p>Use edge middleware wisely, as a first-pass filter, not your final gatekeeper. Build layers. Validate everywhere. And expect failure.</p>

<p>Because someone out there is already crafting the next bypass.</p>]]></content><author><name></name></author><category term="Next.js" /><category term="middleware" /><category term="authentication" /><summary type="html"><![CDATA[Authentication at the Edge]]></summary></entry><entry><title type="html">Hello World.</title><link href="http://localhost:4000/first/introduction/2025/03/28/Welcome-To-The-Blog.html" rel="alternate" type="text/html" title="Hello World." /><published>2025-03-28T10:00:00+02:00</published><updated>2025-03-28T10:00:00+02:00</updated><id>http://localhost:4000/first/introduction/2025/03/28/Welcome-To-The-Blog</id><content type="html" xml:base="http://localhost:4000/first/introduction/2025/03/28/Welcome-To-The-Blog.html"><![CDATA[<h1 id="welcome-to-darkforge-labs">Welcome to DarkForge Labs</h1>

<p>We’re a team of security engineers, hackers, and builders obsessed with solving problems in cybersecurity. At DarkForge Labs, we don’t just find threats, we dismantle them.</p>

<p>This blog is where we’ll share sharp, technical insights, real-world exploit breakdowns, research deep dives, and a behind-the-scenes look at how we defend the edge.</p>

<p>Whether you’re red team, blue team, or somewhere in between—pull up a chair. It’s about to get interesting.</p>

<p>Stay sharp.</p>

<p>– DarkForge Labs</p>]]></content><author><name></name></author><category term="first" /><category term="introduction" /><summary type="html"><![CDATA[Welcome to DarkForge Labs]]></summary></entry></feed>